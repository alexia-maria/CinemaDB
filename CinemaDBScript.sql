CREATE TABLE Movies (
    movie_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEy,
    title VARCHAR2(255) NOT NULL,
    genre VARCHAR2(100) NOT NULL,
    duration NUMBER CHECK(duration > 0), 
    director VARCHAR2(255) NOT NULL,
    release_year NUMBER
);

INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Inception', 'Sci-Fi', 148, 'Christopher Nolan', 2010);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Interstellar', 'Sci-Fi', 169, 'Christopher Nolan', 2014);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('The Dark Knight', 'Action', 152, 'Christopher Nolan', 2008);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Titanic', 'Romance', 195, 'James Cameron', 1997);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Avatar', 'Sci-Fi', 162, 'James Cameron', 2009);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('The Matrix', 'Sci-Fi', 136, 'Lana Wachowski', 1999);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Gladiator', 'Action', 155, 'Ridley Scott', 2000);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('The Godfather', 'Crime', 175, 'Francis Ford Coppola', 1972);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Forrest Gump', 'Drama', 142, 'Robert Zemeckis', 1994);
INSERT INTO Movies (title, genre, duration, director, release_year) VALUES ('Joker', 'Thriller', 122, 'Todd Phillips', 2019);



CREATE TABLE Halls (
    hall_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hall_name VARCHAR2(100) NOT NULL,
    capacity NUMBER NOT NULL CHECK(capacity > 0)
);

INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 1', 100);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 2', 120);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 3', 80);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 4', 150);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 5', 200);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 6', 90);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 7', 110);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 8', 130);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 9', 140);
INSERT INTO Halls (hall_name, capacity) VALUES ('Hall 10', 95);


CREATE TABLE Schedules (
    schedule_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id NUMBER REFERENCES Movies(movie_id),
    hall_id NUMBER REFERENCES Halls(hall_id),
    show_date DATE NOT NULL,
    show_time VARCHAR2(5) NOT NULL --HH:MM
);

INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (1, 1, TO_DATE('2025-02-20', 'YYYY-MM-DD'), '14:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (2, 1, TO_DATE('2025-02-20', 'YYYY-MM-DD'), '17:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (2, 2, TO_DATE('2025-02-20', 'YYYY-MM-DD'), '16:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (3, 3, TO_DATE('2025-02-21', 'YYYY-MM-DD'), '18:30');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (3, 3, TO_DATE('2025-02-21', 'YYYY-MM-DD'), '21:30');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (4, 4, TO_DATE('2025-02-21', 'YYYY-MM-DD'), '20:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (5, 5, TO_DATE('2025-02-22', 'YYYY-MM-DD'), '13:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (6, 6, TO_DATE('2025-02-22', 'YYYY-MM-DD'), '15:30');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (1, 6, TO_DATE('2025-02-22', 'YYYY-MM-DD'), '19:30');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (7, 7, TO_DATE('2025-02-23', 'YYYY-MM-DD'), '17:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (8, 8, TO_DATE('2025-02-23', 'YYYY-MM-DD'), '19:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (9, 9, TO_DATE('2025-02-24', 'YYYY-MM-DD'), '21:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (9, 9, TO_DATE('2025-02-24', 'YYYY-MM-DD'), '14:00');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (10, 10, TO_DATE('2025-02-24', 'YYYY-MM-DD'), '22:30');
INSERT INTO Schedules (movie_id, hall_id, show_date, show_time) VALUES (1, 10, TO_DATE('2025-02-24', 'YYYY-MM-DD'), '18:30');


ALTER TABLE Schedules ADD available_seats NUMBER;


UPDATE Schedules s
SET available_seats = (SELECT h.capacity FROM Halls h WHERE h.hall_id = s.hall_id);



CREATE TABLE Users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) UNIQUE NOT NULL,
    phone VARCHAR2(20) UNIQUE
);


INSERT INTO Users (name, email, phone) VALUES ('Alice Johnson', 'alice@gmail.com', '0712345678');
INSERT INTO Users (name, email, phone) VALUES ('Bob Smith', 'bob@gmail.com', '0723456789');
INSERT INTO Users (name, email, phone) VALUES ('Charlie Brown', 'charlie@gmail.com', '0734567890');
INSERT INTO Users (name, email, phone) VALUES ('David Wilson', 'david@gmail.com', '0745678901');
INSERT INTO Users (name, email, phone) VALUES ('Emma Davis', 'emma@gmail.com', '0756789012');
INSERT INTO Users (name, email, phone) VALUES ('Frank Moore', 'frank@gmail.com', '0767890123');
INSERT INTO Users (name, email, phone) VALUES ('Grace White', 'grace@gmail.com', '0778901234');
INSERT INTO Users (name, email, phone) VALUES ('Henry Miller', 'henry@gmail.com', '0789012345');
INSERT INTO Users (name, email, phone) VALUES ('Ivy Scott', 'ivy@gmail.com', '0790123456');
INSERT INTO Users (name, email, phone) VALUES ('Jack Turner', 'jack@gmail.com', '0701234567');



CREATE TABLE Reservations (
    reservation_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES Users(user_id),
    schedule_id NUMBER REFERENCES Schedules(schedule_id),
    seat_count NUMBER CHECK (seat_count > 0)
);

INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (1, 1, 2);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (2, 2, 3);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (3, 3, 1);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (4, 4, 5);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (5, 5, 2);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (6, 6, 4);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (7, 7, 3);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (8, 8, 2);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (9, 9, 1);
INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (10, 10, 6);

-- Procedure that checks if a given number of setas, in a given schedule, is available for the customer and returns 'Available' if that is the case

CREATE OR REPLACE PROCEDURE check_seat_availability(
    p_schedule_id IN NUMBER,
    p_seat_count IN NUMBER,
    p_result OUT VARCHAR2
) AS
    v_capacity NUMBER;
    v_reserved NUMBER;
BEGIN
    SELECT h.capacity INTO v_capacity
    FROM Schedules s
    JOIN Halls h ON s.hall_id = h.hall_id
    WHERE s.schedule_id = p_schedule_id;

    SELECT NVL(SUM(seat_count), 0) INTO v_reserved
    FROM Reservations
    WHERE schedule_id = p_schedule_id;

    IF (v_reserved + p_seat_count) <= v_capacity THEN
        p_result := 'Available';
    ELSE
        p_result := 'Not enough seats available';
    END IF;
END;
/


DECLARE
    v_status VARCHAR2(50);
BEGIN
    check_seat_availability(1, 3, v_status);
    DBMS_OUTPUT.PUT_LINE(v_status);
END;
/


-- Trigger that decreases the available seats after each reservation

CREATE OR REPLACE TRIGGER decrease_available_seats
BEFORE INSERT ON Reservations
FOR EACH ROW
DECLARE
    v_available_seats NUMBER;
BEGIN
    SELECT available_seats INTO v_available_seats
    FROM Schedules
    WHERE schedule_id = :NEW.schedule_id;

    IF v_available_seats < :NEW.seat_count THEN
        RAISE_APPLICATION_ERROR(-20001, 'Not enough seats available!');
    ELSE
        UPDATE Schedules
        SET available_seats = available_seats - :NEW.seat_count
        WHERE schedule_id = :NEW.schedule_id;
    END IF;
END;
/

INSERT INTO Reservations (user_id, schedule_id, seat_count) VALUES (1, 1, 10);


-- Procedures that outputs the movies that are streaming at a certain date

CREATE OR REPLACE FUNCTION get_movies_by_date(p_date IN DATE)
RETURN SYS_REFCURSOR AS
    movie_cursor SYS_REFCURSOR;
BEGIN
    OPEN movie_cursor FOR
        SELECT DISTINCT m.title, m.genre, m.duration, m.director
        FROM Movies m
        JOIN Schedules s ON m.movie_id = s.movie_id
        WHERE s.show_date = p_date;
    
    RETURN movie_cursor;
END;
/

DECLARE
    v_cursor SYS_REFCURSOR;
    v_title VARCHAR2(255);
    v_genre VARCHAR2(100);
    v_duration NUMBER;
    v_director VARCHAR2(255);
BEGIN
    v_cursor := get_movies_by_date(TO_DATE('2025-02-21', 'YYYY-MM-DD'));
    
    LOOP
        FETCH v_cursor INTO v_title, v_genre, v_duration, v_director;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Title: ' || v_title || ' | Genre: ' || v_genre || 
                             ' | Duration: ' || v_duration || ' min | Director: ' || v_director);
    END LOOP;

    CLOSE v_cursor;
END;
/

